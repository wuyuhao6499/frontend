AWSTemplateFormatVersion: '2010-09-09'
Description: VPC, Subnets, IGW, SG, and EC2s with mapping-based configuration

Parameters:
  AccountId:
    Type: String
    Default: 325216836291
  Environment:
    Type: String
    AllowedValues: [dev, stg, prd]
    Default: stg

Mappings:
  env:
    name:
      "111111111111": dev
      "325216836291": stg
      "999999999999": prd
    dev:
      vpc: 10.0.0.0/16
      subnet1a: 10.0.0.0/24
      subnet1c: 10.0.1.0/24
    stg:
      vpc: 10.1.0.0/16
      subnet1a: 10.1.0.0/24
      subnet1c: 10.1.1.0/24
    prd:
      vpc: 10.2.0.0/16
      subnet1a: 10.2.0.0/24
      subnet1c: 10.2.1.0/24

Conditions:
  IsPrd: !Equals [!Ref Environment, prd]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [env, !Ref Environment, vpc]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  Subnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [env, !Ref Environment, subnet1a]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-subnet1a'

  Subnet1c:
    Type: AWS::EC2::Subnet
    Condition: IsPrd
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [env, !Ref Environment, subnet1c]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-subnet1c'

  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: IsPrd
    Properties:
      VpcId: !Ref VPC

  Route1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Route2:
    Type: AWS::EC2::Route
    Condition: IsPrd
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Assoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1a
      RouteTableId: !Ref RouteTable1

  Assoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsPrd
    Properties:
      SubnetId: !Ref Subnet1c
      RouteTableId: !Ref RouteTable2

  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EC2A:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref Subnet1a
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      SecurityGroupIds:
        - !Ref MySG
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-ec2a'

  EC2C:
    Type: AWS::EC2::Instance
    Condition: IsPrd
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref Subnet1c
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      SecurityGroupIds:
        - !Ref MySG
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-ec2c'
